apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $.ObjectMeta.Name }}
  labels:
    app: {{ $.ObjectMeta.Name }}
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
data:
  core-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
      <property>
        <name>fs.defaultFS</name>
        <value>hdfs://{{ $.ObjectMeta.Name }}-namenode:9000/</value>
        <description>NameNode URI</description>
      </property>
    </configuration>
  hdfs-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>

    {{- if $.Spec.WebHdfs.Enabled -}}
      <property>
          <name>dfs.webhdfs.enabled</name>
          <value>true</value>
      </property>
    {{- end -}}

      <property>
        <name>dfs.datanode.use.datanode.hostname</name>
        <value>false</value>
      </property>

      <property>
        <name>dfs.client.use.datanode.hostname</name>
        <value>false</value>
      </property>

      <property>
        <name>dfs.replication</name>
          <value>3</value>
      </property>

      <property>
        <name>dfs.datanode.data.dir</name>
        <value>file:///usr/local/hadoop/dn</value>
      </property>

      <property>
        <name>dfs.namenode.name.dir</name>
        <value>file:///usr/local/hadoop/nn</value>
      </property>

      <property>
        <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
        <value>false</value>
      </property>

      <!-- Bind to all interfaces -->
      <property>
        <name>dfs.namenode.rpc-bind-host</name>
        <value>0.0.0.0</value>
      </property>

      <property>
        <name>dfs.namenode.servicerpc-bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <!-- /Bind to all interfaces -->
    </configuration>

  mapred-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

    <configuration>
      <property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
      </property>
      <property>
        <name>mapreduce.jobhistory.address</name>
        <value>{{ $.ObjectMeta.Name }}-resourcemanager-0.{{ $.ObjectMeta.Name }}-resourcemanager.{{ $.ObjectMeta.Namespace }}.svc.cluster.local:10020</value>
      </property>
      <property>
        <name>mapreduce.jobhistory.webapp.address</name>
        <value>{{ $.ObjectMeta.Name }}-resourcemanager-0.{{ $.ObjectMeta.Name }}-resourcemanager.{{ $.ObjectMeta.Namespace }}.svc.cluster.local:19888</value>
      </property>
    </configuration>

  workers: |
    {{- $count := $.Spec.Hdfs.DataNode.PdbMinAvailable | int -}}
    {{- range $i, $e := until $count }}
    {{ $.ObjectMeta.Name }}-datanode-{{ $i }}.{{ $.ObjectMeta.Name }}-datanode.{{ $.ObjectMeta.Namespace }}.svc.cluster.local
    {{- end }}

  start-yarn-nm.sh: |
    #!/usr/bin/env bash

    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.


    # Start all yarn daemons.  Run this on master node.

    echo "starting yarn daemons"

    bin=`dirname "${BASH_SOURCE-$0}"`
    bin=`cd "$bin"; pwd`

    DEFAULT_LIBEXEC_DIR="$bin"/../libexec
    HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}
    . $HADOOP_LIBEXEC_DIR/yarn-config.sh

    # start resourceManager
    # "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start resourcemanager
    # start nodeManager
    "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start nodemanager
    # start proxyserver
    #"$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start proxyserver

  start-yarn-rm.sh: |
    #!/usr/bin/env bash

    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.


    # Start all yarn daemons.  Run this on master node.

    echo "starting yarn daemons"

    bin=`dirname "${BASH_SOURCE-$0}"`
    bin=`cd "$bin"; pwd`

    DEFAULT_LIBEXEC_DIR="$bin"/../libexec
    HADOOP_LIBEXEC_DIR=${HADOOP_LIBEXEC_DIR:-$DEFAULT_LIBEXEC_DIR}
    . $HADOOP_LIBEXEC_DIR/yarn-config.sh

    # start resourceManager
    "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start resourcemanager
    # start nodeManager
    # "$bin"/yarn-daemons.sh --config $YARN_CONF_DIR  start nodemanager
    # start proxyserver
    "$bin"/yarn-daemon.sh --config $YARN_CONF_DIR  start proxyserver

  yarn-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

    <configuration>
      <property>
        <name>yarn.resourcemanager.hostname</name>
        <value>{{ $.ObjectMeta.Name }}-resourcemanager</value>
      </property>

      <!-- Bind to all interfaces -->
      <property>
        <name>yarn.resourcemanager.bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>yarn.nodemanager.bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <property>
        <name>yarn.timeline-service.bind-host</name>
        <value>0.0.0.0</value>
      </property>
      <!-- /Bind to all interfaces -->

      <property>
        <name>yarn.nodemanager.vmem-check-enabled</name>
        <value>false</value>
      </property>

      <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
      </property>

      <property>
        <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
        <value>org.apache.hadoop.mapred.ShuffleHandler</value>
      </property>

      <property>
        <description>List of directories to store localized files in.</description>
        <name>yarn.nodemanager.local-dirs</name>
        <value>/var/lib/hadoop-yarn/cache/${user.name}/nm-local-dir</value>
      </property>

      <property>
        <description>Where to store container logs.</description>
        <name>yarn.nodemanager.log-dirs</name>
        <value>/var/log/hadoop-yarn/containers</value>
      </property>

      <property>
        <description>Where to aggregate logs to.</description>
        <name>yarn.nodemanager.remote-app-log-dir</name>
        <value>/var/log/hadoop-yarn/apps</value>
      </property>

      <property>
        <name>yarn.application.classpath</name>
        <value>
          /usr/local/hadoop/etc/hadoop,
          /usr/local/hadoop/share/hadoop/common/*,
          /usr/local/hadoop/share/hadoop/common/lib/*,
          /usr/local/hadoop/share/hadoop/hdfs/*,
          /usr/local/hadoop/share/hadoop/hdfs/lib/*,
          /usr/local/hadoop/share/hadoop/mapreduce/*,
          /usr/local/hadoop/share/hadoop/mapreduce/lib/*,
          /usr/local/hadoop/share/hadoop/yarn/*,
          /usr/local/hadoop/share/hadoop/yarn/lib/*
        </value>
      </property>
    </configuration>





---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.ObjectMeta.Name }}-datanode
  labels:
    app: {{ $.ObjectMeta.Name }}-datanode
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-datanode
    component: {{ $.ObjectMeta.Name }}-datanode
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
  annotations:
    operator.dameng.com/title: {{ $.Spec.Title | hexenc | quote }}
spec:
  serviceName: {{ $.ObjectMeta.Name }}-datanode
  replicas: {{ $.Spec.Hdfs.DataNode.PdbMinAvailable }}
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-datanode
      release: {{ $.ObjectMeta.Name }}-datanode
      component: {{ $.ObjectMeta.Name }}-datanode
  template:
    metadata:
      labels:
        app: {{ $.ObjectMeta.Name }}-datanode
        release: {{ $.ObjectMeta.Name }}-datanode
        component: {{ $.ObjectMeta.Name }}-datanode
        operator.dameng.com/id: {{ $.Spec.ID | quote }}
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: dn
                  release: dn
                  component: dn
      terminationGracePeriodSeconds: 0
      containers:
        - name: {{ $.ObjectMeta.Name }}-datanode
          image: {{ $.Spec.Container.Image }}
          imagePullPolicy: {{ $.Spec.Container.PullPolicy | quote }}
          args:
            - "--DataNode"
{{ parseResources $.Spec.Hdfs.DataNode.Resources | indent 10 }}
          readinessProbe:
            httpGet:
              path: /
              port: 9864
            initialDelaySeconds: 5
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /
              port: 9864
            initialDelaySeconds: 10
            timeoutSeconds: 2
          volumeMounts:
            - name: hadoop-config
              mountPath: /usr/local/hadoop/etc/hadoop
            - name: dfs
              mountPath: /usr/local/hadoop/dn
      volumes:
        - name: hadoop-config
          configMap:
            name: {{ $.ObjectMeta.Name }}
        - name: dfs
          hostPath:
            # Ensure the file directory is created.
            path: /home/data/dn
            type: DirectoryOrCreate


---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ $.ObjectMeta.Name }}-datanode
  labels:
    app: hadoop
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}
    component: hdfs-dn
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  selector:
    matchLabels:
      app: hadoop
      release: {{ $.ObjectMeta.Name }}
      component: hdfs-dn
  minAvailable: {{ $.Spec.Hdfs.DataNode.PdbMinAvailable }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-datanode
  labels:
    app: {{ $.ObjectMeta.Name }}-datanode
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-datanode
    component: {{ $.ObjectMeta.Name }}-datanode
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  ports:
    - name: dfs
      port: 9000
      protocol: TCP
    - name: webhdfs
      port: 9864
  clusterIP: None
  selector:
    app: {{ $.ObjectMeta.Name }}-datanode
    release: {{ $.ObjectMeta.Name }}-datanode
    component: {{ $.ObjectMeta.Name }}-datanode

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.ObjectMeta.Name }}-namenode
  labels:
    app: {{ $.ObjectMeta.Name }}-namenode
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-namenode
    component: {{ $.ObjectMeta.Name }}-namenode
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
  annotations:
    operator.dameng.com/title: {{ $.Spec.Title | hexenc | quote }}
spec:
  serviceName: {{ $.ObjectMeta.Name }}-namenode
  replicas: {{ $.Spec.Hdfs.NameNode.PdbMinAvailable }}
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-namenode
      release: {{ $.ObjectMeta.Name }}-namenode
      component: {{ $.ObjectMeta.Name }}-namenode
  template:
    metadata:
      labels:
        app: {{ $.ObjectMeta.Name }}-namenode
        release: {{ $.ObjectMeta.Name }}-namenode
        component: {{ $.ObjectMeta.Name }}-namenode
        operator.dameng.com/id: {{ $.Spec.ID | quote }}
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ $.ObjectMeta.Name }}-namenode
                  release: {{ $.ObjectMeta.Name }}-namenode
                  component: {{ $.ObjectMeta.Name }}-namenode
      terminationGracePeriodSeconds: 0
      containers:
        - name: {{ $.ObjectMeta.Name }}-namenode
          image: "{{ $.Spec.Container.Image }}"
          imagePullPolicy: {{ $.Spec.Container.PullPolicy | quote }}
          args:
            - "--NameNode"
            - "--NameNodeDir=$(HDFS_NAME_NODE_DIR)"
          securityContext:
            privileged: true
          env:
            - name: HDFS_NAME_NODE_DIR
              value: "/usr/local/hadoop/nn"
{{ parseResources $.Spec.Hdfs.NameNode.Resources | indent 10 }}
          readinessProbe:
            httpGet:
              path: /
              port: 9870
            initialDelaySeconds: 5
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /
              port: 9870
            initialDelaySeconds: 10
            timeoutSeconds: 2
          volumeMounts:
            - name: hadoop-config
              mountPath: /usr/local/hadoop/etc/hadoop
            - name: dfs
              mountPath: /usr/local/hadoop/nn
      volumes:
        - name: hadoop-config
          configMap:
            name: {{ $.ObjectMeta.Name }}
        - name: dfs
          hostPath:
            # Ensure the file directory is created.
            path: /home/data/nn
            type: DirectoryOrCreate

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ $.ObjectMeta.Name }}-namenode
  labels:
    app: {{ $.ObjectMeta.Name }}-namenode
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}
    component: {{ $.ObjectMeta.Name }}-namenode
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-namenode
      release: {{ $.ObjectMeta.Name }}-namenode
      component: {{ $.ObjectMeta.Name }}-namenode
  minAvailable: {{ $.Spec.Hdfs.NameNode.PdbMinAvailable }}


---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-namenode
  labels:
    app: {{ $.ObjectMeta.Name }}-namenode
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-namenode
    component: {{ $.ObjectMeta.Name }}-namenode
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  ports:
    - name: dfs
      port: 9000
      protocol: TCP
    - name: webhdfs
      port: 9870
  clusterIP: None
  selector:
    app: {{ $.ObjectMeta.Name }}-namenode
    release: {{ $.ObjectMeta.Name }}-namenode
    component: {{ $.ObjectMeta.Name }}-namenode


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.ObjectMeta.Name }}-resourcemanager
  labels:
    app: {{ $.ObjectMeta.Name }}-resourcemanager
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-resourcemanager
    component: {{ $.ObjectMeta.Name }}-resourcemanager
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
  annotations:
    operator.dameng.com/title: {{ $.Spec.Title | hexenc | quote }}
spec:
  serviceName: {{ $.ObjectMeta.Name }}-resourcemanager
  replicas: 1
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-resourcemanager
      release: {{ $.ObjectMeta.Name }}-resourcemanager
      component: {{ $.ObjectMeta.Name }}-resourcemanager
  template:
    metadata:
      labels:
        app: {{ $.ObjectMeta.Name }}-resourcemanager
        release: {{ $.ObjectMeta.Name }}-resourcemanager
        component: {{ $.ObjectMeta.Name }}-resourcemanager
        operator.dameng.com/id: {{ $.Spec.ID | quote }}
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ $.ObjectMeta.Name }}-resourcemanager
                  release: {{ $.ObjectMeta.Name }}-resourcemanager
                  component: {{ $.ObjectMeta.Name }}-resourcemanager
      terminationGracePeriodSeconds: 0
      containers:
        - name: {{ $.ObjectMeta.Name }}-resourcemanager
          image: "{{ $.Spec.Container.Image }}"
          imagePullPolicy: {{ $.Spec.Container.PullPolicy | quote }}
          ports:
            - containerPort: 8088
              name: web
          args:
            - "--ResourceManager"
{{ parseResources $.Spec.ResourceManager.Resources | indent 10 }}
          readinessProbe:
            httpGet:
              path: /ws/v1/cluster/info
              port: 8088
            initialDelaySeconds: 5
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /ws/v1/cluster/info
              port: 8088
            initialDelaySeconds: 10
            timeoutSeconds: 2
          volumeMounts:
            - name: hadoop-config
              mountPath: /usr/local/hadoop/etc/hadoop
      volumes:
        - name: hadoop-config
          configMap:
            name: {{ $.ObjectMeta.Name }}


---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ $.ObjectMeta.Name }}-resourcemanager
  labels:
    app: {{ $.ObjectMeta.Name }}-resourcemanager
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-resourcemanager
    component: {{ $.ObjectMeta.Name }}-resourcemanager
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-resourcemanager
      release: {{ $.ObjectMeta.Name }}-resourcemanager
      component: {{ $.ObjectMeta.Name }}-resourcemanager
  minAvailable: 1


---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-resourcemanager
  labels:
    app: {{ $.ObjectMeta.Name }}-resourcemanager
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-resourcemanager
    component: {{ $.ObjectMeta.Name }}-resourcemanager
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  ports:
    - port: 8088
      name: web
  clusterIP: None
  selector:
    app: {{ $.ObjectMeta.Name }}-resourcemanager
    release: {{ $.ObjectMeta.Name }}-resourcemanager
    component: {{ $.ObjectMeta.Name }}-resourcemanager




---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.ObjectMeta.Name }}-nodemanager
  labels:
    app: {{ $.ObjectMeta.Name }}-nodemanager
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-nodemanager
    component: {{ $.ObjectMeta.Name }}-nodemanager
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
  annotations:
    operator.dameng.com/title: {{ $.Spec.Title | hexenc | quote }}
spec:
  serviceName: {{ $.ObjectMeta.Name }}-nodemanager
  replicas: {{ $.Spec.NodeManager.PdbMinAvailable }}
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-nodemanager
      release: {{ $.ObjectMeta.Name }}-nodemanager
      component: {{ $.ObjectMeta.Name }}-nodemanager
  {{- if $.Spec.NodeManager.ParallelCreate }}
  podManagementPolicy: Parallel
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ $.ObjectMeta.Name }}-nodemanager
        release: {{ $.ObjectMeta.Name }}-nodemanager
        component: {{ $.ObjectMeta.Name }}-nodemanager
        operator.dameng.com/id: {{ $.Spec.ID | quote }}
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ $.ObjectMeta.Name }}-nodemanager
                  release: {{ $.ObjectMeta.Name }}-nodemanager
                  component: {{ $.ObjectMeta.Name }}-nodemanager
      terminationGracePeriodSeconds: 0
      containers:
        - name: {{ $.ObjectMeta.Name }}-nodemanager
          image: "{{ $.Spec.Container.Image }}"
          imagePullPolicy: {{ $.Spec.Container.PullPolicy | quote }}
          ports:
            - containerPort: 8088
              name: web
          args:
            - "--NodeManager"
          securityContext:
            privileged: true
{{ parseResources $.Spec.NodeManager.Resources | indent 10 }}
          readinessProbe:
            httpGet:
              path: /node
              port: 8042
            initialDelaySeconds: 10
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /node
              port: 8042
            initialDelaySeconds: 10
            timeoutSeconds: 2
          env:
            - name: MY_CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: {{ $.ObjectMeta.Name }}-nodemanager
                  resource: limits.cpu
                  divisor: 1
            - name: MY_MEM_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: {{ $.ObjectMeta.Name }}-nodemanager
                  resource: limits.memory
                  divisor: 1M
            - name: HDFS_NAME_NODE_DIR
              value: "/usr/local/hadoop/nn"
          volumeMounts:
            - name: hadoop-config
              mountPath: /usr/local/hadoop/etc/hadoop
      volumes:
        - name: hadoop-config
          configMap:
            name: {{ $.ObjectMeta.Name }}
        - name: nn-dir
          hostPath:
            path: /home/data/nn
            type: DirectoryOrCreate



---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ $.ObjectMeta.Name }}-nodemanager
  labels:
    app: {{ $.ObjectMeta.Name }}-nodemanager
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-nodemanager
    component: {{ $.ObjectMeta.Name }}-nodemanager
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-nodemanager
      release: {{ $.ObjectMeta.Name }}-nodemanager
      component: {{ $.ObjectMeta.Name }}-nodemanager
  minAvailable: {{ $.Spec.NodeManager.PdbMinAvailable }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-nodemanager
  labels:
    app: {{ $.ObjectMeta.Name }}-nodemanager
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}
    component: {{ $.ObjectMeta.Name }}-nodemanager
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  ports:
    - port: 8088
      name: web
    - port: 8082
      name: web2
    - port: 8042
      name: api
  clusterIP: None
  selector:
    app: {{ $.ObjectMeta.Name }}-nodemanager
    release: {{ $.ObjectMeta.Name }}-nodemanager
    component: {{ $.ObjectMeta.Name }}-nodemanager

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-hdfs-ui
  labels:
    app: {{ $.ObjectMeta.Name }}-hdfs-ui
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}
    component: {{ $.ObjectMeta.Name }}-hdfs-ui
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  type: NodePort
  ports:
    - port: 9870
      name: web
  selector:
    app: {{ $.ObjectMeta.Name }}-hdfs-ui
    release: {{ $.ObjectMeta.Name }}-hdfs-ui
    component: {{ $.ObjectMeta.Name }}-hdfs-ui


---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-yarn-ui
  labels:
    app: {{ $.ObjectMeta.Name }}-yarn-ui
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}
    component: {{ $.ObjectMeta.Name }}-yarn-ui
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  type: NodePort
  ports:
    - port: 8088
      name: web
  selector:
    app: {{ $.ObjectMeta.Name }}-yarn-ui
    release: {{ $.ObjectMeta.Name }}-yarn-ui
    component: {{ $.ObjectMeta.Name }}-yarn-ui



---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.ObjectMeta.Name }}-historyserver
  labels:
    app: {{ $.ObjectMeta.Name }}-historyserver
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-historyserver
    component: {{ $.ObjectMeta.Name }}-historyserver
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
  annotations:
    operator.dameng.com/title: {{ $.Spec.Title | hexenc | quote }}
spec:
  serviceName: {{ $.ObjectMeta.Name }}-historyserver
  replicas: 1
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-historyserver
      release: {{ $.ObjectMeta.Name }}-historyserver
      component: {{ $.ObjectMeta.Name }}-historyserver
  {{- if $.Spec.NodeManager.ParallelCreate }}
  podManagementPolicy: Parallel
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ $.ObjectMeta.Name }}-historyserver
        release: {{ $.ObjectMeta.Name }}-historyserver
        component: {{ $.ObjectMeta.Name }}-historyserver
        operator.dameng.com/id: {{ $.Spec.ID | quote }}
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: {{ $.ObjectMeta.Name }}-historyserver
                  release: {{ $.ObjectMeta.Name }}-historyserver
                  component: {{ $.ObjectMeta.Name }}-historyserver
      terminationGracePeriodSeconds: 0
      containers:
        - name: {{ $.ObjectMeta.Name }}-historyserver
          image: "{{ $.Spec.Container.Image }}"
          imagePullPolicy: {{ $.Spec.Container.PullPolicy | quote }}
          ports:
            - containerPort: 19888
              name: web
          args:
            - "--HistoryServer"
          securityContext:
            privileged: true
{{ parseResources $.Spec.NodeManager.Resources | indent 10 }}
          volumeMounts:
            - name: hadoop-config
              mountPath: /usr/local/hadoop/etc/hadoop
      volumes:
        - name: hadoop-config
          configMap:
            name: {{ $.ObjectMeta.Name }}
        - name: nn-dir
          hostPath:
            path: /home/data/nn
            type: DirectoryOrCreate


---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ $.ObjectMeta.Name }}-historyserver
  labels:
    app: {{ $.ObjectMeta.Name }}-historyserver
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-historyserver
    component: {{ $.ObjectMeta.Name }}-historyserver
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  selector:
    matchLabels:
      app: {{ $.ObjectMeta.Name }}-historyserver
      release: {{ $.ObjectMeta.Name }}-historyserver
      component: {{ $.ObjectMeta.Name }}-historyserver
  minAvailable: 1

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.ObjectMeta.Name }}-historyserver
  labels:
    app: {{ $.ObjectMeta.Name }}-historyserver
    chart: hadoop-1.1.4
    release: {{ $.ObjectMeta.Name }}-historyserver
    component: {{ $.ObjectMeta.Name }}-historyserver
    operator.dameng.com/id: {{ $.Spec.ID | quote }}
spec:
  ports:
    - port: 19888
      name: web
  clusterIP: None
  selector:
    app: {{ $.ObjectMeta.Name }}-historyserver
    release: {{ $.ObjectMeta.Name }}-historyserver
    component: {{ $.ObjectMeta.Name }}-historyserver
